set nocompatible

" load various plugins
call plug#begin('~/.local/share/nvim/plugged')

Plug 'calviken/vim-gdscript3' " Better default key bindings
Plug 'liuchengxu/vim-better-default'
Plug 'liuchengxu/vim-which-key'

" The bar below
Plug 'vim-airline/vim-airline'

" The colorscheme
Plug 'morhetz/gruvbox'
Plug 'scrooloose/nerdtree'
Plug 'mokkun/twine.vim'

Plug 'dense-analysis/ale'

" Language support
Plug 'sheerun/vim-polyglot'
Plug 'neoclide/coc.nvim', {'branch': 'release' }


Plug 'leafgarland/typescript-vim'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-surround'

"Plug 'ervandew/supertab'
Plug 'ron-rs/ron.vim'

call plug#end()

"general config
set termguicolors
set scrolloff=3
set autoindent
set noswapfile
set nobackup
set nowritebackup
set hidden
set cursorline
set expandtab
set hlsearch
set incsearch
set ignorecase
set smartcase
set gdefault
set inccommand=nosplit
syntax on
set hidden
set cmdheight=2
set updatetime=300
set shortmess+=x
set shortmess+=c
set signcolumn=yes
set updatetime=300


let mapleader ="\<Space>"
nnoremap <silent> <leader> :<c-u>WhichKey '<Space>'<CR>
nnoremap <silent> <leader>ff :NERDTreeToggle<CR>

nmap <silent> <leader>mc :make<CR>
autocmd filetype rust nmap <silent> <leader>mc :make check<CR>
autocmd filetype rust nmap <silent> <leader>mC :make clean<CR>
autocmd filetype rust nmap <silent> <leader>ml :make clippy<CR>
autocmd filetype rust nmap <silent> <leader>md :make doc<CR>
autocmd filetype rust nmap <silent> <leader>mb :make build<CR>
autocmd filetype rust nmap <silent> <leader>mD :make doc --open<CR>
autocmd filetype rust nmap <silent> <leader>mt :make test<CR>

autocmd filetype python nmap <silent> <leader>le :CocCommand python.execInTerminal<CR>


set completeopt=noinsert,menuone,noselect

autocmd CursorHold * silent call CocActionAsync('highlight')

"let g:SuperTabDefaultCompletionType = "<c-n>"
"
function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~ '\s'
endfunction

inoremap <silent><expr> <TAB>
            \ pumvisible() ? "\<C-n>" :
            \ <SID>check_back_space() ? "\<TAB>" :
            \ coc#refresh()

inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<CR>"

let g:airline#extensions#ale#enabled = 1

let g:ale_fixers = {
            \ '*': ['remove_trailing_lines', 'trim_whitespace'],
            \ 'rust': ['rustfmt'],
            \ 'javascript': ['prettier', 'eslint'],
            \ 'typescript': ['prettier'],
            \ 'typescriptreact': ['prettier']
            \ }
let g:ale_fix_on_save = 1

tnoremap <Esc> <C-\><C-n>
inoremap <silent><expr> <c-space> coc#refresh()
nmap <silent> <leader>ll :<C-u>CocList commands<CR>
" Or map each action separately
nmap <silent> <leader>lD :call <SID>show_documentation()<CR>
nmap <silent> <leader>ld <Plug>(coc-definition)
nmap <silent> <leader>lt <Plug>(coc-definition)
nmap <silent> <leader>li <Plug>(coc-implementation)
nmap <silent> <leader>lr <Plug>(coc-references)
nmap <silent> <leader>lR <Plug>(coc-rename)
nmap <silent> <leader>lF <Plug>(coc-format-selected)
vmap <silent> <leader>lF <Plug>(coc-format-selected)
nmap <silent> <leader>lf <Plug>(coc-fix-current)
nmap <silent> <leader>la <Plug>(coc-refactor)
vmap <silent> <leader>lf :CocFix


function! s:show_documentation()
    if &filetype == 'vim'
        execute 'h '.expand('<cword>')
    else
        call CocAction('doHover')
    endif
endfunction

nmap <silent> <leader>ep :cprevious<CR>
nmap <silent> <leader>en :cnext<CR>
nmap <silent> <leader>vr :so $MYVIMRC<CR>
nmap <silent> <leader>ve :e $MYVIMRC<CR>

" auto start NERDTree
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter *  if argc() == 0 && !exists("s:std_in") | NERDTree | endif
let g:NERDTreeQuitOnOpen = 1

set background=dark
colorscheme gruvbox
let g:gruvbox_bold = 1
let g:gruvbox_italicize_string = 1

if has('termguicolors')
    set termguicolors
endif

" Airline specific config
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1

" Setting the key bind names
runtime key_bindings.vim
